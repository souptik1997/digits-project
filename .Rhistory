x = .data[["x"]], y = .data[["y"]],
colour = .data[["colour"]], size = .data[["colour"]],
group = .data[["step"]]
),
inherit.aes = FALSE
)
)
p_pacman <- list(
ggforce::geom_arc_bar(
data = pacman_moves,
mapping = ggplot2::aes(
x0 = .data[["x"]], y0 = .data[["y"]],
r0 = 0, r = 0.5,
start = .data[["start"]], end = .data[["end"]],
colour = .data[["colour"]], fill = .data[["colour"]],
group = .data[["step"]]
),
inherit.aes = FALSE
)
)
p_ghosts <- purrr::map(.x = ghosts, .f = function(data) {
ghost_moves <- compute_ghost_status(
ghost = data,
pacman_moves = pacman_moves,
bonus_points_eaten = bonus_points_eaten
)
list(
ggplot2::geom_polygon(
data = tidyr::unnest(ghost_moves, "body"),
mapping = ggplot2::aes(
x = .data[["x"]], y = .data[["y"]],
fill = .data[["colour"]], colour = .data[["colour"]],
group = .data[["step"]]
),
inherit.aes = FALSE
),
ggforce::geom_circle(
data = tidyr::unnest(ghost_moves, "eyes"),
mapping = ggplot2::aes(
x0 = .data[["x0"]], y0 = .data[["y0"]],
r = .data[["r"]],
colour = .data[["part"]], fill = .data[["part"]],
group = .data[["step"]]
),
inherit.aes = FALSE
)
)
})
## Animate ---------------------------------------------------------------------------------------
gganimate::animate(
plot = base_grid + p_points + p_pacman + p_ghosts + gganimate::transition_manual(.data[["step"]]),
width = 3.7 * 2.54,
height = 4.7 * 2.54,
units = "cm",
res = 120,
bg = "black",
duration = 10,
renderer = gganimate::gifski_renderer(file = file)
)
}
compute_ghost_coord <- function(data) {
data %>%
tidyr::unnest(c("x", "y")) %>%
dplyr::mutate(
X0 = .data[["x"]],
Y0 = .data[["y"]],
state_x = sign(round(.data[["x"]]) - dplyr::lag(round(.data[["x"]]))),
state_y = sign(round(.data[["y"]]) - dplyr::lag(round(.data[["y"]]))),
direction = dplyr::case_when(
(is.na(.data[["state_x"]]) | .data[["state_x"]] %in% 0) &
(is.na(.data[["state_y"]]) | .data[["state_y"]] %in% 0) ~ "middle",
.data[["state_x"]] == 1 & .data[["state_y"]] == 0 ~ "right",
.data[["state_x"]] == -1 & .data[["state_y"]] == 0 ~ "left",
.data[["state_x"]] == 0 & .data[["state_y"]] == -1 ~ "down",
.data[["state_x"]] == 0 & .data[["state_y"]] == 1 ~ "up"
)
) %>%
tidyr::unnest("direction") %>%
dplyr::mutate(state = list(1:4)) %>%
tidyr::unnest("state") %>%
dplyr::mutate(
step = 1:dplyr::n(),
noise_x = stats::rnorm(dplyr::n(), mean = 0, sd = 0.05),
noise_y = stats::rnorm(dplyr::n(), mean = 0, sd = 0.05),
body = purrr::pmap(
.l = list(.data[["x"]], .data[["y"]], .data[["noise_x"]], .data[["noise_y"]]),
.f = function(.x, .y, .noise_x, .noise_y) {
dplyr::mutate(
.data = get(utils::data("ghost_body")),
x = .data[["x"]] + .x + .noise_x,
y = .data[["y"]] + .y + .noise_y
)
}
),
eyes = purrr::pmap(
.l = list(.data[["x"]], .data[["y"]], .data[["noise_x"]], .data[["noise_y"]], .data[["direction"]]),
.f = function(.x, .y, .noise_x, .noise_y, .direction) {
dplyr::mutate(
.data = dplyr::filter(get(utils::data("ghost_eyes")), .data[["direction"]] == .direction),
x0 = .data[["x0"]] + .x + .noise_x,
y0 = .data[["y0"]] + .y + .noise_y,
direction = NULL
)
}
),
x = NULL,
y = NULL
)
}
compute_ghost_status <- function(ghost, pacman_moves, bonus_points_eaten) {
ghosts_vulnerability <- bonus_points_eaten %>%
dplyr::filter(.data[["type"]] == "big") %>%
dplyr::group_by(.data[["x"]], .data[["y"]]) %>%
dplyr::summarise(step_init = min(.data[["step"]])) %>%
dplyr::ungroup() %>%
dplyr::mutate(
step = purrr::map(.data[["step_init"]], ~ seq(.x, .x + 30, 1)),
vulnerability = TRUE,
x = NULL,
y = NULL
) %>%
tidyr::unnest("step")
ghost_out <- dplyr::left_join(
x = compute_ghost_coord(ghost),
y = pacman_moves %>%
dplyr::mutate(ghost_eaten = TRUE) %>%
dplyr::select(c("X0" = "x", "Y0" = "y", "step", "ghost_eaten")),
by = c("X0", "Y0", "step")
) %>%
dplyr::left_join(y = ghosts_vulnerability, by = "step") %>%
dplyr::mutate(
vulnerability = tidyr::replace_na(.data[["vulnerability"]], FALSE),
ghost_name = .data[["colour"]],
ghost_eaten = .data[["ghost_eaten"]] & .data[["vulnerability"]],
colour = ifelse(.data[["vulnerability"]], paste0(.data[["ghost_name"]], "_weak"), .data[["colour"]])
)
pos_eaten_start <- which(ghost_out[["ghost_eaten"]])
ghosts_home <- which(ghost_out[["X0"]] == 10 & ghost_out[["Y0"]] == 14)
for (ipos in pos_eaten_start) {
pos_eaten_end <- min(ghosts_home[ghosts_home>=ipos])
ghost_out[["colour"]][ipos:pos_eaten_end] <- paste0(unique(ghost_out[["ghost_name"]]), "_eaten")
}
dplyr::left_join(
x = ghost_out,
y = ghost_out %>%
dplyr::filter(.data[["step"]] == .data[["step_init"]] & grepl("eaten", .data[["colour"]])) %>%
dplyr::mutate(already_eaten = TRUE) %>%
dplyr::select(c("step_init", "already_eaten")),
by = "step_init"
) %>%
dplyr::mutate(
colour = dplyr::case_when(
.data[["already_eaten"]] & .data[["X0"]] == 10 & .data[["Y0"]] == 14 ~ paste0(.data[["ghost_name"]], "_eaten"),
grepl("weak", .data[["colour"]]) & .data[["already_eaten"]] ~ .data[["ghost_name"]],
TRUE ~ .data[["colour"]]
)
)
}
compute_pacman_coord <- function(data) {
pacman_state <- dplyr::tribble(
~state, ~start, ~end,
"open_right", 14 / 6 * pi, 4 / 6 * pi,
"close_right", 15 / 6 * pi, 3 / 6 * pi,
"open_up", 11 / 6 * pi, 1 / 6 * pi,
"close_up", 12 / 3 * pi, 0 / 6 * pi,
"open_left", 8 / 6 * pi, - 2 / 6 * pi,
"close_left", 9 / 6 * pi, - 3 / 6 * pi,
"open_down", 5 / 6 * pi, - 5 / 6 * pi,
"close_down", pi, - pi
)
data %>%
tidyr::unnest(c("x", "y")) %>%
dplyr::mutate(
state_x = sign(.data[["x"]] - dplyr::lag(.data[["x"]])),
state_y = sign(.data[["y"]] - dplyr::lag(.data[["y"]])),
state = dplyr::case_when(
(is.na(.data[["state_x"]]) | .data[["state_x"]] %in% 0) &
(is.na(.data[["state_y"]]) | .data[["state_y"]] %in% 0) ~ list(c("open_right", "close_right")),
.data[["state_x"]] == 1 & .data[["state_y"]] == 0 ~ list(c("open_right", "close_right")),
.data[["state_x"]] == -1 & .data[["state_y"]] == 0 ~ list(c("open_left", "close_left")),
.data[["state_x"]] == 0 & .data[["state_y"]] == -1 ~ list(c("open_down", "close_down")),
.data[["state_x"]] == 0 & .data[["state_y"]] == 1 ~ list(c("open_up", "close_up"))
)
)  %>%
tidyr::unnest("state") %>%
dplyr::mutate(step = 1:dplyr::n()) %>%
dplyr::left_join(y = pacman_state, by = "state")
}
compute_points_eaten <- function(bonus_points, pacman_moves) {
dplyr::right_join(bonus_points, pacman_moves, by = c("x", "y")) %>%
dplyr::distinct(.data[["step"]], .data[["x"]], .data[["y"]], .data[["type"]]) %>%
dplyr::mutate(
step = purrr::map2(.data[["step"]], max(.data[["step"]]), ~ seq(.x, .y, 1)),
colour = "eaten"
) %>%
tidyr::unnest("step")
}
#' @keywords internal
"_PACKAGE"
#' Inky moves
#'
#' @format A [[`tbl`]] object.
"inky"
#' Blinky moves
#'
#' @format A [[`tbl`]] object.
"blinky"
#' Pinky moves
#'
#' @format A [[`tbl`]] object.
"pinky"
#' Clyde moves
#'
#' @format A [[`tbl`]] object.
"clyde"
#' Pac-Man moves
#'
#' @format A [[`tbl`]] object.
"pacman"
#' Ghost Body Polygon
#'
#' @format A [[`tbl`]] object.
"ghost_body"
#' Ghost Eyes Polygon
#'
#' @format A [[`tbl`]] object.
"ghost_eyes"
#' Maze Walls
#'
#' @format A [[`tbl`]] object.
"maze_walls"
#' Maze Points
#'
#' @format A [[`tbl`]] object.
"maze_points"
# The following block is used by usethis to automatically manage
# roxygen namespace tags. Modify with care!
## usethis namespace: start
#' @importFrom magrittr %>%
#' @importFrom rlang .data
## usethis namespace: end
NULL
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
runApp()
runApp()
performPCA <- function(ogd, pcaChoice) {
pcaTeam <- prcomp(ogd, scale. = TRUE)
teamOrder <- match(team, rownames(pcaTeam$x))
pcaScores <- pcaTeam$x[teamOrder,]
pcaLoadings <- pcaTeam$rotation
pcaVarianceExplained <- round(summary(pcaTeam)$importance[2,], 2)
pcaCorrelations <- as.data.frame(cor(ogd[teamOrder,], pcaScores))
return (list(
scores = data.frame(
x = pcaScores[, pcaChoice$fpc],
y = pcaScores[, pcaChoice$spc],
team = team,
color = color,
auxcolor = auxcolor
),
pcainfo = list(
pcl = pcaLoadings[,c(pcaChoice$fpc,pcaChoice$spc)],
pcva = pcaVarianceExplained[c(pcaChoice$fpc,pcaChoice$spc)],
pcc = pcaCorrelations[,c(pcaChoice$fpc,pcaChoice$spc)],
varnames = rownames(pcaLoadings),
pcaNames = colnames(pcaLoadings)[c(pcaChoice$fpc,pcaChoice$spc)]
)
))
}
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("magick")
install.packages("image.libfacedetection", repos = "https://bnosac.github.io/drat")
install.packages("magick")
install.packages("image.libfacedetection", repos = "https://bnosac.github.io/drat")
install.packages("facerec")
library(facerec)
facerec_init()
install.packages(c("opencv", "psych"))
library(opencv)
library(psych)
# Live face detection:
ocv_video(ocv_face)
# Various options
ocv_video(ocv_edges)
ocv_video(ocv_knn)
ocv_video(ocv_facemask)
ocv_video(ocv_mog2)
ocv_video(ocv_stylize)
ocv_video(ocv_sketch)
View(df)
View(df)
#Libraries
library(opencv)
library(psych)
# Live face detection:
ocv_video(ocv_face)
# Various options
ocv_video(ocv_edges)
ocv_video(ocv_knn)
ocv_video(ocv_facemask)
ocv_video(ocv_mog2)
ocv_video(ocv_stylize)
ocv_video(ocv_sketch)
# Overlay face filter
test <- ocv_camera()
bitmap <- ocv_bitmap(test)
width <- dim(bitmap)[2]
height <- dim(bitmap)[3]
png('bg.png', width = width, height = height)
data('iris')
print(pairs.panels(iris[1:4],
gap=0,
pch=21,
bg = c("red", "green", "blue")[iris$Species]))
dev.off()
bg <- ocv_read('bg.png')
ocv_video(function(input){
mask <- ocv_facemask(input)
ocv_copyto(input, bg, mask) })
# Face recognition
ccb <- ocv_read('~/Desktop/ccb.jpg')
faces <- ocv_face(ccb)
ocv_write(b, '~/Desktop/b.jpg')
# Various options
ocv_sketch(ccb, color = T)
ocv_blur(ccb, ksize = 15)
ocv_hog(ccb)
ocv_markers(ccb)
ocv_stylize(ccb)
# get the face location data:
facemask <- ocv_facemask(ccb)
attr(facemask, 'faces')
#Libraries
library(opencv)
library(psych)
#Libraries
library(opencv)
library(psych)
# Live face detection:
ocv_video(ocv_face)
# Various options
ocv_video(ocv_edges)
ocv_video(ocv_knn)
ocv_video(ocv_facemask)
ocv_video(ocv_mog2)
ocv_video(ocv_stylize)
ocv_video(ocv_sketch)
# Overlay face filter
test <- ocv_camera()
bitmap <- ocv_bitmap(test)
width <- dim(bitmap)[2]
height <- dim(bitmap)[3]
png('bg.png', width = width, height = height)
data('iris')
print(pairs.panels(iris[1:4],
gap=0,
pch=21,
bg = c("red", "green", "blue")[iris$Species]))
dev.off()
bg <- ocv_read('bg.png')
ocv_video(function(input){
mask <- ocv_facemask(input)
ocv_copyto(input, bg, mask) })
# Face recognition
ccb <- ocv_read('~/Desktop/ccb.jpg')
faces <- ocv_face(ccb)
ocv_write(b, '~/Desktop/b.jpg')
# Various options
ocv_sketch(ccb, color = T)
ocv_blur(ccb, ksize = 15)
ocv_hog(ccb)
ocv_markers(ccb)
ocv_stylize(ccb)
# get the face location data:
facemask <- ocv_facemask(ccb)
attr(facemask, 'faces')
#Libraries
library(opencv)
library(psych)
# Live face detection:
ocv_video(ocv_face)
# Various options
ocv_video(ocv_edges)
ocv_video(ocv_knn)
ocv_video(ocv_facemask)
ocv_video(ocv_mog2)
ocv_video(ocv_stylize)
ocv_video(ocv_sketch)
# Overlay face filter
test <- ocv_camera()
bitmap <- ocv_bitmap(test)
width <- dim(bitmap)[2]
height <- dim(bitmap)[3]
png('bg.png', width = width, height = height)
data('iris')
print(pairs.panels(iris[1:4],
gap=0,
pch=21,
bg = c("red", "green", "blue")[iris$Species]))
dev.off()
bg <- ocv_read('bg.png')
ocv_video(function(input){
mask <- ocv_facemask(input)
ocv_copyto(input, bg, mask) })
# Face recognition
ccb <- ocv_read('~/Desktop/ccb.jpg')
faces <- ocv_face(ccb)
ocv_write(b, '~/Desktop/b.jpg')
# Various options
ocv_sketch(ccb, color = T)
ocv_blur(ccb, ksize = 15)
ocv_hog(ccb)
ocv_markers(ccb)
ocv_stylize(ccb)
# get the face location data:
facemask <- ocv_facemask(ccb)
attr(facemask, 'faces')
ocv_video(ocv_face)
test <- ocv_camera()
install.packages("keras")
library{"keras"}
library(keras)
library(tensorflow)
data<-iris
data
#Return the first part of iris
head(data, n=0)
#Inspecting the structure
str(data)
#Obtaining dimensions
dim(data)
plot(data$Petal.Length,
data$Petal.Width,
pch=21, bg=c("red","green3","blue")[unclass(data$Species)],
xlab="Petal Length",
ylab="Petal Width")
# Overall correlation between `Petal.Length` and `Petal.Width`
cor.test(data$Petal.Length,data$Petal.Width)
#Turning species into a categorical variable
y<-data$Species
y_cat<-as.character(y)
for(i in 1:length(y_cat))
{if(y_cat[i]=="setosa")
y_cat[i]=1
if(y_cat[i]=="versicolor")
y_cat[i]=2
if(y_cat[i]=="virginica")
y_cat[i]=3
}
y_cat<-as.factor(y_cat)
y_cat
data_new<-cbind(data$Sepal.length,data$Sepal.Width,data$Petal.Length,data$Petal.Width,y_cat)
data_new
colnames(data_new)<-c("Sepal width","Petal length","Petal Width","y_cat")
data_new
data_new<-cbind(data$Sepal.Length,data_new)
data_new
colnames(data_new)<-c("Sepal Length","Sepal width","Petal length","Petal Width","y_cat")
data_new
# Determine sample size
ind <-sample(1:2,150,replace=TRUE,prob=c(0.67, 0.33))
ind
# Split the `iris` data
iris.training <- data_new[ind==1,1:4]
iris.training
iris.test <- data_new[ind==2,1:4]
iris.test
# Split the class attribute
iris.trainingtarget <-data_new[ind==1,5]
iris.trainingtarget
iris.testtarget <-data_new[ind==2,5]
iris.testtarget
# Initialize the sequential model
model <- keras_model_sequential()
Y
y
Y
# Initialize the sequential model
model <- keras_model_sequential()
Y
df=read_file("mfeat-zar")
library("readr")
df=read_file("mfeat-zar")
setwd("F:/digits project")
df=read_file("mfeat-zar")
df=read_file("mfeat-fac")
View(df)
pca1=prcomp(df,scale=.TRUE)
pca1=prcomp(df)
df=read_file("mfeat-pix")
View(df)
mfeat
"mfeat-pix"
df=read.file("mfeat-pix")
df=read_file("mfeat-pix")
df=read_file("mfeat-fac")
df
pca1=prcomp(df)
head(df)
S<-cov(df)
S<-cov(df[:,1:216])
S<-cov(df[:,])
colnames(df)<-c(1:216)
S<-cov(df[:])
S<-cov(df[1:2000])
as.data.frame(df)
